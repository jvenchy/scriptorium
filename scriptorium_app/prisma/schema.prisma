// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id              Int        @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String     @unique
  avatar          String?    
  phoneNumber     String
  passwordHash    String
  isAdministrator Boolean    @default(false)
  codeTemplates   CodeTemplate[]
  blogPosts       BlogPost[]
  comments        Comment[]
  reports         Report[]
}

model CodeTemplate {
  id          Int            @id @default(autoincrement())
  codeSnippet String?
  title       String
  explanation String
  tags        Tag[]
  forkedFrom  CodeTemplate?  @relation("ForkRelation", fields: [forkedFromId], references: [id])
  forkedFromId Int?
  forks       CodeTemplate[] @relation("ForkRelation")
  author      Account        @relation(fields: [authorId], references: [id])
  authorId    Int
  language    String
  blogPosts   BlogPost[]
}

model CodeExecution {
  id           Int     @id @default(autoincrement())
  codeString   String
  errorString  String?
  outputString String?
  runTime      Float
}

model BlogPost {
  id                Int       @id @default(autoincrement())
  title             String
  description       String
  tags              Tag[]
  codeTemplates     CodeTemplate[]
  comments          Comment[]
  upvotes           Int       @default(0)
  downvotes         Int       @default(0)
  numReports        Int       @default(0)
  author            Account   @relation(fields: [authorId], references: [id])
  authorId          Int
  canEdit           Boolean   @default(true)
  isVisible         Boolean   @default(true)
  reports           Report[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Comment {
  id                Int        @id @default(autoincrement())
  content           String
  author            Account    @relation(fields: [authorId], references: [id])
  authorId          Int
  blogPost          BlogPost   @relation(fields: [blogPostId], references: [id])
  blogPostId Int
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  parentCommentId   Int?
  parentComment     Comment?   @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies           Comment[]  @relation("CommentReplies")
  upvotes           Int        @default(0)
  downvotes         Int        @default(0)
  numReports        Int        @default(0)
}

model Report {
  id          Int      @id @default(autoincrement())
  blogPost    BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId  Int
  reporter    Account  @relation(fields: [reporterId], references: [id])
  reporterId  Int
  explanation String
}

model Tag {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  codeTemplates CodeTemplate[]
  blogPosts     BlogPost[]
}
